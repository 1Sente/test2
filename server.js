const express = require('express');
const axios = require('axios');
const fs = require('fs').promises;
const path = require('path');
const crypto = require('crypto');
const sqlite3 = require('sqlite3').verbose();
const session = require('express-session');
const bcrypt = require('bcryptjs');

const app = express();
const PORT = process.env.PORT || 3000;

// Middleware
app.use(express.json({ limit: '10mb' }));
app.use(express.urlencoded({ extended: true, limit: '10mb' }));
app.use(express.static('public'));

// –°–µ—Å—Å–∏–∏
app.use(session({
    secret: process.env.SESSION_SECRET || crypto.randomBytes(64).toString('hex'),
    resave: false,
    saveUninitialized: false,
    cookie: { 
        secure: false, 
        maxAge: 24 * 60 * 60 * 1000,
        httpOnly: true
    }
}));

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const DB_DIR = path.join(__dirname, 'data');
const DB_FILE = path.join(DB_DIR, 'database.db');
const SALT_ROUNDS = 12;
const MAX_QUESTIONS = 20;

// –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
async function createDirectories() {
    try {
        await fs.mkdir(DB_DIR, { recursive: true });
        await fs.mkdir(path.join(__dirname, 'config'), { recursive: true });
        await fs.mkdir(path.join(__dirname, 'logs'), { recursive: true });
        console.log('‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å–æ–∑–¥–∞–Ω—ã');
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π:', error);
        throw error;
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
async function initializeDatabase() {
    await createDirectories();
    
    return new Promise((resolve, reject) => {
        const db = new sqlite3.Database(DB_FILE, (err) => {
            if (err) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î:', err);
                reject(err);
            } else {
                console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ SQLite —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
            }
        });

        // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
        db.serialize(() => {
            db.run(`CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                username TEXT UNIQUE NOT NULL,
                password_hash TEXT NOT NULL,
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP
            )`, (err) => {
                if (err) console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã users:', err);
            });

            db.run(`CREATE TABLE IF NOT EXISTS forms (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                form_id TEXT UNIQUE NOT NULL,
                form_name TEXT NOT NULL,
                webhook_url TEXT NOT NULL,
                title TEXT DEFAULT '',
                description TEXT DEFAULT '',
                color TEXT DEFAULT '#5865f2',
                footer TEXT DEFAULT 'GTA5RP LAMESA',
                mentions TEXT DEFAULT '',
                question_titles TEXT DEFAULT '[]',
                discord_id_fields TEXT DEFAULT '["0"]',
                conditional_mentions TEXT DEFAULT '[]',
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                updated_at DATETIME DEFAULT CURRENT_TIMESTAMP
            )`, (err) => {
                if (err) console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã forms:', err);
            });

            db.run(`CREATE TABLE IF NOT EXISTS logs (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                form_id TEXT,
                status TEXT NOT NULL,
                message TEXT,
                timestamp DATETIME DEFAULT CURRENT_TIMESTAMP
            )`, (err) => {
                if (err) console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã logs:', err);
            });

            // –°–æ–∑–¥–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            const defaultPassword = 'gta5rpLaMesa_Rayzaki100';
            bcrypt.hash(defaultPassword, SALT_ROUNDS, (err, hash) => {
                if (err) {
                    console.error('–û—à–∏–±–∫–∞ —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä–æ–ª—è:', err);
                    return;
                }
                
                db.run(`INSERT OR IGNORE INTO users (username, password_hash) VALUES (?, ?)`, 
                    ['admin', hash], 
                    function(err) {
                        if (err) {
                            console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:', err);
                        } else {
                            if (this.changes > 0) {
                                console.log('üëë –°–æ–∑–¥–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: admin / admin123');
                                console.log('üîê –°–ú–ï–ù–ò–¢–ï –ü–ê–†–û–õ–¨ –í –ö–û–î–ï!');
                            }
                        }
                    }
                );
            });
        });

        resolve(db);
    });
}

// Middleware –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
function requireAuth(req, res, next) {
    if (req.session && req.session.authenticated) {
        next();
    } else {
        res.status(401).json({ status: 'error', message: '–¢—Ä–µ–±—É–µ—Ç—Å—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è' });
    }
}

// –§—É–Ω–∫—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
async function logRequest(formId, status, message = '') {
    return new Promise((resolve, reject) => {
        db.run(
            `INSERT INTO logs (form_id, status, message) VALUES (?, ?, ?)`,
            [formId, status, message],
            function(err) {
                if (err) {
                    console.error('–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –ª–æ–≥–∞:', err);
                    reject(err);
                } else {
                    resolve();
                }
            }
        );
    });
}

// –í–∞–ª–∏–¥–∞—Ü–∏—è webhook URL
function isValidWebhookUrl(url) {
    return url && url.startsWith('https://discord.com/api/webhooks/');
}

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Discord
async function sendDiscordMessage(formConfig, formData, answers) {
    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—è —Å Discord ID
    let discordIdFields = [0]; // –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å
    try {
        discordIdFields = JSON.parse(formConfig.discord_id_fields || '[0]');
    } catch (e) {
        console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ discord_id_fields:', e);
    }

    // –ü–æ–ª—É—á–∞–µ–º —É—Å–ª–æ–≤–Ω—ã–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è
    let conditionalMentions = [];
    try {
        conditionalMentions = JSON.parse(formConfig.conditional_mentions || '[]');
    } catch (e) {
        console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ conditional_mentions:', e);
    }

    // –°–æ–±–∏—Ä–∞–µ–º Discord ID –∏–∑ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –ø–æ–ª–µ–π
    let discordIds = [];
    discordIdFields.forEach(fieldIndex => {
        if (answers[fieldIndex] && answers[fieldIndex].text) {
            let discordId = answers[fieldIndex].text.replace(/[^0-9]/g, '');
            if (discordId.length >= 17) {
                discordIds.push(discordId);
            }
        }
    });

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —É—Å–ª–æ–≤–∏–π
    let mentionContent = '';
    let conditionalRoleIds = [];

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –¥–ª—è —É–ø–æ–º–∏–Ω–∞–Ω–∏–π
    conditionalMentions.forEach(condition => {
        const { question_index, answer_value, role_id } = condition;
        if (answers[question_index] && answers[question_index].text && 
            answers[question_index].text.trim() === answer_value) {
            conditionalRoleIds.push(role_id);
        }
    });

    // –î–æ–±–∞–≤–ª—è–µ–º —É—Å–ª–æ–≤–Ω—ã–µ —Ä–æ–ª–∏
    if (conditionalRoleIds.length > 0) {
        const conditionalMentions = conditionalRoleIds
            .map(id => id.trim())
            .filter(id => id.length >= 17)
            .map(id => `<@&${id}>`)
            .join(' ');
        
        if (conditionalMentions) {
            mentionContent += conditionalMentions + ' ';
        }
    }

    // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è
    if (formConfig.mentions) {
        const additionalMentions = formConfig.mentions.split(',')
            .map(id => id.trim())
            .filter(id => id.length >= 17)
            .map(id => `<@&${id}>`)
            .join(' ');
        
        if (additionalMentions) {
            mentionContent += additionalMentions + ' ';
        }
    }

    // –î–æ–±–∞–≤–ª—è–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    if (discordIds.length > 0) {
        const userMentions = discordIds.map(id => `<@${id}>`).join(' ');
        mentionContent += userMentions;
    }

    // –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
    mentionContent = mentionContent.trim();

    const embed = {
        title: formConfig.title || `üìã ${formData.title || formConfig.form_name}`,
        description: formConfig.description || null,
        color: parseInt((formConfig.color || '#5865f2').replace('#', ''), 16),
        fields: [],
        timestamp: new Date().toISOString(),
        footer: formConfig.footer ? { text: formConfig.footer } : { text: 'GTA5RP LAMESA' }
    };

    // –ü–æ–ª—É—á–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤
    let questionTitles = [];
    try {
        questionTitles = JSON.parse(formConfig.question_titles || '[]');
    } catch (e) {
        console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ question_titles:', e);
    }

    const limitedAnswers = answers.slice(0, MAX_QUESTIONS);

    limitedAnswers.forEach((answer, index) => {
        if (answer.text) {
            const isDiscordIdField = discordIdFields.includes(index);
            
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞—Å—Ç–æ–º–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞ –∏–ª–∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ
            const questionText = questionTitles[index] || `–í–æ–ø—Ä–æ—Å ${index + 1}`;
            
            if (isDiscordIdField) {
                const discordId = answer.text.replace(/[^0-9]/g, '');
                if (discordId.length >= 17) {
                    embed.fields.push({
                        name: questionText,
                        value: `<@${discordId}>` + (discordIdFields.length > 1 ? ` üëÜ –£–ø–æ–º–∏–Ω–∞–Ω–∏–µ ${discordIdFields.indexOf(index) + 1}` : ' üëÜ –£–ø–æ–º–∏–Ω–∞–Ω–∏–µ'),
                        inline: false
                    });
                } else {
                    embed.fields.push({
                        name: questionText,
                        value: answer.text,
                        inline: false
                    });
                }
            } else {
                const fieldValue = answer.text.length > 1024 ? 
                    answer.text.substring(0, 1020) + '...' : answer.text;
                
                embed.fields.push({
                    name: questionText,
                    value: fieldValue,
                    inline: false
                });
            }
        }
    });

    if (answers.length > MAX_QUESTIONS) {
        embed.fields.push({
            name: 'üìù –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ',
            value: `–ü–æ–∫–∞–∑–∞–Ω—ã –ø–µ—Ä–≤—ã–µ ${MAX_QUESTIONS} –∏–∑ ${answers.length} –≤–æ–ø—Ä–æ—Å–æ–≤. –û—Å—Ç–∞–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –Ω–µ –±—ã–ª–∏ –≤–∫–ª—é—á–µ–Ω—ã –∏–∑-–∑–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π Discord.`,
            inline: false
        });
    }

    if (embed.fields.length === 0) {
        embed.fields.push({
            name: 'üìù –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è',
            value: '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è',
            inline: false
        });
    }

    const payload = {
        embeds: [embed]
    };

    if (mentionContent) {
        payload.content = mentionContent;
    }

    const response = await axios.post(formConfig.webhook_url, payload);
    return response.data;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–æ–≤
function parseYandexFormAnswers(answersData) {
    try {
        if (Array.isArray(answersData)) {
            return answersData;
        }

        if (typeof answersData === 'string') {
            const parsed = JSON.parse(answersData);
            return parseYandexFormAnswers(parsed);
        }

        if (answersData && answersData.answer && answersData.answer.data) {
            const answers = [];
            const data = answersData.answer.data;
            
            Object.keys(data).forEach(key => {
                const field = data[key];
                if (field && field.value !== undefined) {
                    let answerText = field.value;
                    
                    if (Array.isArray(answerText)) {
                        answerText = answerText.map(item => item.text || item).join(', ');
                    } else if (typeof answerText === 'object') {
                        answerText = JSON.stringify(answerText);
                    }
                    
                    answers.push({
                        question_id: key,
                        text: String(answerText)
                    });
                }
            });
            
            return answers;
        }

        if (answersData && typeof answersData === 'object') {
            const answers = [];
            Object.keys(answersData).forEach(key => {
                if (key !== 'formId' && key !== 'formTitle') {
                    answers.push({
                        question_id: key,
                        text: String(answersData[key])
                    });
                }
            });
            return answers;
        }

        return [];
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–æ–≤:', error);
        return [];
    }
}

let db;

// POST –≤–µ–±—Ö—É–∫ –¥–ª—è –Ø–Ω–¥–µ–∫—Å –§–æ—Ä–º
app.post('/webhook/yandex-form', async (req, res) => {
    try {
        console.log('üì® –ü–æ–ª—É—á–µ–Ω POST –∑–∞–ø—Ä–æ—Å –æ—Ç –Ø–Ω–¥–µ–∫—Å –§–æ—Ä–º—ã');
        
        let requestBody = req.body;
        
        let formId, formTitle, answers;

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ JSON-RPC –∑–∞–ø—Ä–æ—Å–∞
        if (requestBody && requestBody.jsonrpc === '2.0') {
            console.log('üîß –û–±—Ä–∞–±–æ—Ç–∫–∞ JSON-RPC –∑–∞–ø—Ä–æ—Å–∞');
            
            const { method, params, id } = requestBody;
            
            formId = params.formId;
            formTitle = params.formTitle;
            
            if (params.answers) {
                if (typeof params.answers === 'string') {
                    try {
                        const answersData = JSON.parse(params.answers);
                        answers = parseYandexFormAnswers(answersData);
                    } catch (e) {
                        console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ answers –≤ JSON-RPC:', e);
                        answers = [];
                    }
                } else {
                    answers = parseYandexFormAnswers(params.answers);
                }
            } else {
                answers = [];
            }

            db.get(
                `SELECT form_name, webhook_url, title, description, color, footer, mentions, question_titles, discord_id_fields, conditional_mentions
                 FROM forms WHERE form_id = ?`,
                [formId],
                async (err, formConfig) => {
                    if (err) {
                        console.error('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Ñ–æ—Ä–º—ã:', err);
                        await logRequest(formId, 'ERROR', '–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö');
                        return res.json({
                            jsonrpc: '2.0',
                            error: { code: -32603, message: 'Internal error' },
                            id: id
                        });
                    }
                    
                    if (!formConfig) {
                        console.warn(`‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –≤–µ–±—Ö—É–∫ –¥–ª—è —Ñ–æ—Ä–º—ã: ${formId}`);
                        await logRequest(formId, 'NOT_FOUND', '–§–æ—Ä–º–∞ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞');
                        return res.json({
                            jsonrpc: '2.0',
                            error: { code: -32601, message: `–í–µ–±—Ö—É–∫ –¥–ª—è —Ñ–æ—Ä–º—ã ${formId} –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω` },
                            id: id
                        });
                    }

                    try {
                        const formData = {
                            id: formId,
                            title: formTitle || formConfig.form_name
                        };

                        await sendDiscordMessage(formConfig, formData, answers);

                        console.log(`‚úÖ –î–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã "${formConfig.form_name}" –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ Discord —á–µ—Ä–µ–∑ JSON-RPC`);
                        await logRequest(formId, 'SENT', `–î–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ Discord —á–µ—Ä–µ–∑ JSON-RPC`);

                        res.json({
                            jsonrpc: '2.0',
                            result: { 
                                status: 'success',
                                message: `–î–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ Discord`,
                                formName: formConfig.form_name
                            },
                            id: id
                        });
                    } catch (error) {
                        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Discord:', error);
                        await logRequest(formId, 'DISCORD_ERROR', error.message);
                        res.json({
                            jsonrpc: '2.0',
                            error: { code: -32000, message: '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Discord: ' + error.message },
                            id: id
                        });
                    }
                }
            );
            return;
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω–æ–≥–æ POST –∑–∞–ø—Ä–æ—Å–∞
        if (requestBody && requestBody.form && requestBody.form.id) {
            console.log('üîß –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω–æ–≥–æ POST –∑–∞–ø—Ä–æ—Å–∞');
            
            formId = requestBody.form.id;
            formTitle = requestBody.form.title;
            answers = requestBody.answers || [];
        } else {
            formId = requestBody.formId || requestBody.form_id;
            formTitle = requestBody.formTitle || requestBody.form_title;
            
            if (requestBody.answers) {
                answers = parseYandexFormAnswers(requestBody.answers);
            } else {
                answers = Object.entries(requestBody)
                    .filter(([key, value]) => !['formId', 'form_id', 'formTitle', 'form_title', 'answers'].includes(key))
                    .map(([key, value]) => ({
                        question_id: key,
                        text: String(value)
                    }));
            }
        }

        if (!formId) {
            await logRequest('UNKNOWN', 'ERROR', '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –≤ POST');
            return res.status(400).json({
                status: 'error',
                message: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç formId'
            });
        }

        db.get(
            `SELECT form_name, webhook_url, title, description, color, footer, mentions, question_titles, discord_id_fields, conditional_mentions
             FROM forms WHERE form_id = ?`,
            [formId],
            async (err, formConfig) => {
                if (err) {
                    console.error('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Ñ–æ—Ä–º—ã:', err);
                    await logRequest(formId, 'ERROR', '–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö');
                    return res.status(500).json({
                        status: 'error',
                        message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
                    });
                }
                
                if (!formConfig) {
                    console.warn(`‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –≤–µ–±—Ö—É–∫ –¥–ª—è —Ñ–æ—Ä–º—ã: ${formId}`);
                    await logRequest(formId, 'NOT_FOUND', '–§–æ—Ä–º–∞ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞');
                    return res.status(404).json({
                        status: 'error',
                        message: `–í–µ–±—Ö—É–∫ –¥–ª—è —Ñ–æ—Ä–º—ã ${formId} –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω`
                    });
                }

                try {
                    const formData = {
                        id: formId,
                        title: formTitle || formConfig.form_name
                    };

                    await sendDiscordMessage(formConfig, formData, answers);

                    console.log(`‚úÖ –î–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã "${formConfig.form_name}" –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ Discord`);
                    await logRequest(formId, 'SENT', `–î–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ Discord —á–µ—Ä–µ–∑ POST`);

                    res.json({
                        status: 'success',
                        message: `–î–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ Discord`,
                        formName: formConfig.form_name
                    });
                } catch (error) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Discord:', error);
                    await logRequest(formId, 'DISCORD_ERROR', error.message);
                    res.status(500).json({
                        status: 'error',
                        message: '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Discord'
                    });
                }
            }
        );

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ POST –≤–µ–±—Ö—É–∫–∞:', error);
        logRequest('UNKNOWN', 'ERROR', error.message);
        res.status(500).json({
            status: 'error',
            message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
        });
    }
});

// HTML —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –≤—Ö–æ–¥–∞
const LOGIN_HTML = `
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>–í—Ö–æ–¥ –≤ –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <style>
        :root {
            --primary: #5865f2;
            --primary-dark: #4752c4;
            --success: #57f287;
            --danger: #ed4245;
            --dark: #2f3136;
        }
        
        * { margin: 0; padding: 0; box-sizing: border-box; }
        body { 
            font-family: 'Whitney', 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; 
            background: var(--dark);
            color: #dcddde; 
            display: flex;
            justify-content: center;
            align-items: center;
            min-height: 100vh;
        }
        
        .login-container {
            background: #36393f;
            padding: 2rem;
            border-radius: 8px;
            box-shadow: 0 4px 6px rgba(0,0,0,0.1);
            width: 400px;
            max-width: 90%;
        }
        
        .header { 
            text-align: center;
            margin-bottom: 2rem;
        }
        
        .header h1 { 
            font-size: 1.5rem; 
            margin-bottom: 0.5rem; 
            color: white;
        }
        
        .form-group { 
            margin-bottom: 1.5rem; 
        }
        
        label { 
            display: block; 
            margin-bottom: 0.5rem; 
            font-weight: 600; 
            color: #b9bbbe;
            font-size: 0.9rem;
        }
        
        input { 
            width: 100%; 
            padding: 12px;
            background: #40444b;
            border: 1px solid #40444b;
            border-radius: 4px; 
            font-size: 14px; 
            color: #dcddde;
            transition: all 0.2s;
        }
        
        input:focus { 
            outline: none; 
            border-color: var(--primary);
        }
        
        .btn { 
            background: var(--primary);
            color: white; 
            border: none; 
            padding: 12px 24px; 
            border-radius: 4px; 
            cursor: pointer; 
            font-size: 14px; 
            font-weight: 600;
            transition: all 0.2s;
            width: 100%;
            display: flex;
            justify-content: center;
            align-items: center;
            gap: 8px;
        }
        
        .btn:hover { 
            background: var(--primary-dark);
        }
        
        .alert { 
            padding: 1rem; 
            border-radius: 4px; 
            margin-bottom: 1.5rem; 
            display: none;
        }
        
        .alert-error { 
            background: var(--danger); 
            color: white; 
        }
    </style>
</head>
<body>
    <div class="login-container">
        <div class="header">
            <h1><i class="fab fa-discord"></i> –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è</h1>
            <p>–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å –¥–ª—è –¥–æ—Å—Ç—É–ø–∞</p>
        </div>

        <div id="alert" class="alert alert-error">
            –ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å
        </div>

        <form id="loginForm">
            <div class="form-group">
                <label for="username"><i class="fas fa-user"></i> –õ–æ–≥–∏–Ω</label>
                <input type="text" id="username" name="username" required autocomplete="username">
            </div>

            <div class="form-group">
                <label for="password"><i class="fas fa-lock"></i> –ü–∞—Ä–æ–ª—å</label>
                <input type="password" id="password" name="password" required autocomplete="current-password">
            </div>

            <button type="submit" class="btn">
                <i class="fas fa-sign-in-alt"></i> –í–æ–π—Ç–∏
            </button>
        </form>
    </div>

    <script>
        document.getElementById('loginForm').addEventListener('submit', async (e) => {
            e.preventDefault();
            
            const formData = new FormData(e.target);
            const data = Object.fromEntries(formData);
            
            try {
                const response = await fetch('/admin/login', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(data),
                    credentials: 'include'
                });
                
                const result = await response.json();
                
                if (result.status === 'success') {
                    window.location.href = '/admin';
                } else {
                    document.getElementById('alert').style.display = 'block';
                    document.getElementById('alert').textContent = result.message;
                }
            } catch (error) {
                document.getElementById('alert').style.display = 'block';
                document.getElementById('alert').textContent = '–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è';
            }
        });
    </script>
</body>
</html>
`;

// HTML –∞–¥–º–∏–Ω–∫–∏ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
const ADMIN_HTML = `
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ø–Ω–¥–µ–∫—Å –§–æ—Ä–º–∞–º–∏ ‚Üí Discord</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <style>
        :root {
            --primary: #5865f2;
            --primary-dark: #4752c4;
            --success: #57f287;
            --danger: #ed4245;
            --warning: #fee75c;
            --info: #5865f2;
            --dark: #2f3136;
            --light: #f8fafc;
        }
        
        * { margin: 0; padding: 0; box-sizing: border-box; }
        body { 
            font-family: 'Whitney', 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; 
            background: var(--dark);
            color: #dcddde; 
            line-height: 1.6;
            min-height: 100vh;
        }
        
        .container { 
            max-width: 1400px; 
            margin: 0 auto; 
            padding: 20px; 
        }
        
        .header-bar {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 2rem;
            padding-bottom: 1rem;
            border-bottom: 1px solid #40444b;
        }
        
        .user-info {
            display: flex;
            align-items: center;
            gap: 1rem;
        }
        
        .logout-btn {
            background: var(--danger);
            color: white;
            border: none;
            padding: 8px 16px;
            border-radius: 4px;
            cursor: pointer;
            font-size: 14px;
            display: flex;
            align-items: center;
            gap: 6px;
        }
        
        .logout-btn:hover {
            background: #c03537;
        }
        
        .discord-card {
            background: #36393f;
            border-radius: 8px;
            padding: 2rem;
            margin-bottom: 1.5rem;
            box-shadow: 0 4px 6px rgba(0,0,0,0.1);
            border: 1px solid #40444b;
        }
        
        .header { 
            text-align: center;
            margin-bottom: 2rem;
        }
        
        .header h1 { 
            font-size: 2.5rem; 
            margin-bottom: 0.5rem; 
            color: white;
            font-weight: 700;
        }
        
        .header p { 
            font-size: 1.1rem;
            color: #b9bbbe;
        }
        
        .stats-grid { 
            display: grid; 
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); 
            gap: 1.5rem; 
            margin-bottom: 2rem; 
        }
        
        .stat-card { 
            background: #40444b;
            color: white;
            padding: 1.5rem;
            border-radius: 8px;
            text-align: center;
            border-left: 4px solid var(--primary);
        }
        
        .stat-number { 
            font-size: 2rem; 
            font-weight: bold; 
            margin-bottom: 0.5rem;
            color: var(--success);
        }
        
        .form-grid { 
            display: grid; 
            grid-template-columns: 1fr 1fr; 
            gap: 1.5rem; 
        }
        
        @media (max-width: 768px) {
            .form-grid {
                grid-template-columns: 1fr;
            }
        }
        
        .form-group { 
            margin-bottom: 1.5rem; 
        }
        
        label { 
            display: block; 
            margin-bottom: 0.5rem; 
            font-weight: 600; 
            color: #b9bbbe;
            font-size: 0.9rem;
        }
        
        input, select, textarea { 
            width: 100%; 
            padding: 12px;
            background: #40444b;
            border: 1px solid #40444b;
            border-radius: 4px; 
            font-size: 14px; 
            color: #dcddde;
            transition: all 0.2s;
        }
        
        input:focus, select:focus, textarea:focus { 
            outline: none; 
            border-color: var(--primary);
            background: #40444b;
        }
        
        .btn { 
            background: var(--primary);
            color: white; 
            border: none; 
            padding: 12px 24px; 
            border-radius: 4px; 
            cursor: pointer; 
            font-size: 14px; 
            font-weight: 600;
            transition: all 0.2s;
            display: inline-flex;
            align-items: center;
            gap: 8px;
        }
        
        .btn:hover { 
            background: var(--primary-dark);
        }
        
        .btn-block {
            width: 100%;
            justify-content: center;
        }
        
        .btn-success { background: var(--success); color: #000; }
        .btn-success:hover { background: #45d87c; }
        .btn-danger { background: var(--danger); }
        .btn-danger:hover { background: #c03537; }
        .btn-warning { background: var(--warning); color: #000; }
        .btn-warning:hover { background: #e6d252; }
        .btn-secondary { background: #4f545c; }
        .btn-secondary:hover { background: #5d6269; }
        
        .forms-container {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));
            gap: 1.5rem;
        }
        
        .form-card { 
            background: #40444b;
            border-radius: 8px;
            padding: 1.5rem;
            border: 1px solid #40444b;
            transition: all 0.2s;
            position: relative;
        }
        
        .form-card:hover {
            border-color: var(--primary);
        }
        
        .form-card h3 { 
            margin-bottom: 1rem; 
            color: white;
            display: flex;
            align-items: center;
            gap: 10px;
        }
        
        .form-card p { 
            margin-bottom: 0.5rem; 
            color: #b9bbbe; 
            font-size: 0.9rem;
        }
        
        .form-actions { 
            display: flex; 
            gap: 0.5rem; 
            margin-top: 1.5rem;
            flex-wrap: wrap;
        }
        
        .form-actions .btn {
            flex: 1;
            min-width: 100px;
            padding: 8px 12px;
            font-size: 12px;
        }
        
        .alert { 
            padding: 1rem 1.5rem; 
            border-radius: 4px; 
            margin-bottom: 1.5rem; 
            display: flex;
            align-items: center;
            gap: 10px;
        }
        
        .alert-success { 
            background: var(--success); 
            color: #000; 
        }
        
        .alert-error { 
            background: var(--danger); 
            color: white; 
        }
        
        .alert-warning { 
            background: var(--warning); 
            color: #000; 
        }
        
        .hidden { display: none; }
        
        .tab-container {
            margin-bottom: 2rem;
        }
        
        .tabs {
            display: flex;
            background: #40444b;
            border-radius: 4px;
            padding: 4px;
            margin-bottom: 1.5rem;
        }
        
        .tab {
            flex: 1;
            padding: 12px 20px;
            text-align: center;
            cursor: pointer;
            border-radius: 4px;
            transition: all 0.2s;
            font-weight: 600;
            color: #b9bbbe;
        }
        
        .tab.active {
            background: var(--primary);
            color: white;
        }
        
        .tab-content {
            display: none;
        }
        
        .tab-content.active {
            display: block;
        }
        
        .badge {
            display: inline-block;
            padding: 4px 8px;
            border-radius: 12px;
            font-size: 11px;
            font-weight: 600;
            margin-left: 8px;
        }
        
        .badge-success { background: var(--success); color: #000; }
        .badge-warning { background: var(--warning); color: #000; }
        .badge-danger { background: var(--danger); color: white; }
        
        .webhook-url {
            background: #40444b;
            border: 1px solid #40444b;
            border-radius: 4px;
            padding: 1rem;
            margin: 1rem 0;
            font-family: 'Consolas', monospace;
            word-break: break-all;
            font-size: 0.9rem;
        }
        
        .copy-btn {
            background: var(--primary);
            color: white;
            border: none;
            padding: 6px 12px;
            border-radius: 4px;
            cursor: pointer;
            margin-left: 10px;
            font-size: 12px;
        }

        .config-section {
            background: #40444b;
            border-radius: 4px;
            padding: 1.5rem;
            margin: 1rem 0;
        }

        .config-section h3 {
            margin-bottom: 1rem;
            color: white;
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .color-preview {
            width: 20px;
            height: 20px;
            border-radius: 4px;
            display: inline-block;
            margin-right: 8px;
            vertical-align: middle;
            border: 1px solid #666;
        }

        .mention-example {
            background: #2f3136;
            padding: 8px 12px;
            border-radius: 4px;
            margin: 8px 0;
            font-family: 'Consolas', monospace;
            font-size: 0.8rem;
            border-left: 3px solid var(--primary);
        }

        .embed-preview {
            background: #2f3136;
            border-radius: 8px;
            padding: 1rem;
            margin: 1rem 0;
            border-left: 4px solid #5865f2;
            max-width: 500px;
        }

        .embed-preview .author {
            display: flex;
            align-items: center;
            gap: 8px;
            margin-bottom: 8px;
            font-weight: 600;
        }

        .embed-preview .title {
            font-weight: 600;
            margin-bottom: 8px;
            color: white;
        }

        .embed-preview .field {
            margin: 8px 0;
            padding: 8px;
            background: #40444b;
            border-radius: 4px;
        }

        .embed-preview .field .name {
            font-weight: 600;
            color: var(--success);
            margin-bottom: 4px;
        }

        .embed-preview .footer {
            margin-top: 8px;
            font-size: 0.8rem;
            color: #72767d;
        }

        .info-box {
            background: #2f3136;
            border: 1px solid var(--primary);
            border-radius: 4px;
            padding: 1rem;
            margin: 1rem 0;
        }

        .info-box h4 {
            color: var(--success);
            margin-bottom: 0.5rem;
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .question-title-item {
            display: flex;
            align-items: center;
            gap: 10px;
            margin-bottom: 10px;
            padding: 10px;
            background: #2f3136;
            border-radius: 4px;
        }

        .question-title-item input {
            flex: 1;
        }

        .question-title-item .btn {
            padding: 8px 12px;
        }

        .maintenance-modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0,0,0,0.8);
            z-index: 1000;
            justify-content: center;
            align-items: center;
        }
        
        .maintenance-content {
            background: #36393f;
            border-radius: 8px;
            padding: 2rem;
            max-width: 500px;
            width: 95%;
            border: 1px solid #40444b;
        }

        .discord-id-field-item {
            display: flex;
            align-items: center;
            gap: 10px;
            margin-bottom: 10px;
            padding: 10px;
            background: #2f3136;
            border-radius: 4px;
        }

        .conditional-mention-item {
            background: #2f3136;
            border-radius: 4px;
            padding: 15px;
            margin-bottom: 15px;
            border: 1px solid #40444b;
        }

        .conditional-mention-header {
            display: flex;
            justify-content: between;
            align-items: center;
            margin-bottom: 10px;
        }

        .conditional-mention-content {
            display: grid;
            grid-template-columns: 1fr 1fr 1fr;
            gap: 10px;
        }

        @media (max-width: 768px) {
            .conditional-mention-content {
                grid-template-columns: 1fr;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header-bar">
            <div class="header">
                <h1><i class="fab fa-discord"></i> –Ø–Ω–¥–µ–∫—Å –§–æ—Ä–º—ã ‚Üí Discord</h1>
                <p>–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: –Ω–µ—Å–∫–æ–ª—å–∫–æ Discord ID + —É—Å–ª–æ–≤–Ω—ã–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è</p>
            </div>
            <div class="user-info">
                <span>–í—ã –≤–æ—à–ª–∏ –∫–∞–∫: <strong id="username">admin</strong></span>
                <button class="logout-btn" onclick="logout()">
                    <i class="fas fa-sign-out-alt"></i> –í—ã–π—Ç–∏
                </button>
            </div>
        </div>

        <div id="alert" class="alert hidden"></div>

        <div class="stats-grid">
            <div class="stat-card">
                <div class="stat-number" id="totalForms">0</div>
                <div>–ê–∫—Ç–∏–≤–Ω—ã—Ö —Ñ–æ—Ä–º</div>
            </div>
            <div class="stat-card">
                <div class="stat-number"><i class="fas fa-check-circle"></i></div>
                <div>–°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞</div>
            </div>
            <div class="stat-card">
                <div class="stat-number">${MAX_QUESTIONS}</div>
                <div>–ú–∞–∫—Å. –≤–æ–ø—Ä–æ—Å–æ–≤</div>
            </div>
        </div>

        <div class="info-box">
            <h4><i class="fas fa-info-circle"></i> –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Ä–∞–±–æ—Ç—ã</h4>
            <p><strong>–ù–µ—Å–∫–æ–ª—å–∫–æ Discord ID:</strong> –º–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–ª–µ–π –¥–ª—è —É–ø–æ–º–∏–Ω–∞–Ω–∏—è —Ä–∞–∑–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</p>
            <p><strong>–£—Å–ª–æ–≤–Ω—ã–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è:</strong> —Ç–µ–≥–∏—Ç—å —Ä–∞–∑–Ω—ã–µ —Ä–æ–ª–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ—Ç–≤–µ—Ç–æ–≤ –≤ —Ñ–æ—Ä–º–µ</p>
            <p><strong>–ì–∏–±–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:</strong> –¥–ª—è –∫–∞–∂–¥–æ–π —Ñ–æ—Ä–º—ã –º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ</p>
            <p><strong>–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ:</strong> –¥–æ ${MAX_QUESTIONS} –≤–æ–ø—Ä–æ—Å–æ–≤</p>
        </div>

        <div class="tab-container">
            <div class="tabs">
                <div class="tab active" onclick="showTab('manage')"><i class="fas fa-cog"></i> –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ä–º–∞–º–∏</div>
                <div class="tab" onclick="showTab('webhook')"><i class="fas fa-link"></i> Webhook URL</div>
                <div class="tab" onclick="showTab('logs')"><i class="fas fa-history"></i> –ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤</div>
            </div>

            <!-- –í–∫–ª–∞–¥–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–æ—Ä–º–∞–º–∏ -->
            <div id="manage" class="tab-content active">
                <div class="form-grid">
                    <div class="discord-card">
                        <h2><i class="fas fa-plus-circle"></i> –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é —Å–≤—è–∑—å</h2>
                        <form id="registerForm">
                            <div class="form-group">
                                <label for="formId"><i class="fas fa-fingerprint"></i> ID –Ø–Ω–¥–µ–∫—Å –§–æ—Ä–º—ã *</label>
                                <input type="text" id="formId" name="formId" required 
                                       placeholder="1234567890abcdef">
                            </div>

                            <div class="form-group">
                                <label for="formName"><i class="fas fa-heading"></i> –ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–æ—Ä–º—ã *</label>
                                <input type="text" id="formName" name="formName" required 
                                       placeholder="–§–æ—Ä–º–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏">
                            </div>

                            <div class="form-group">
                                <label for="discordWebhookUrl"><i class="fab fa-discord"></i> Discord Webhook URL *</label>
                                <input type="url" id="discordWebhookUrl" name="discordWebhookUrl" required 
                                       placeholder="https://discord.com/api/webhooks/...">
                            </div>

                            <button type="submit" class="btn btn-block">
                                <i class="fas fa-save"></i> –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–≤—è–∑—å
                            </button>
                        </form>
                    </div>

                    <div class="discord-card">
                        <h2><i class="fas fa-list"></i> –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è</h2>
                        
                        <div class="form-group">
                            <label>–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–µ–±—Ö—É–∫–∞</label>
                            <select id="testFormId">
                                <option value="">-- –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º—É --</option>
                            </select>
                            <button onclick="testWebhook()" class="btn btn-secondary btn-block" style="margin-top: 10px;">
                                <i class="fas fa-vial"></i> –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                            </button>
                        </div>

                        <div class="form-group">
                            <label>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</label>
                            <button onclick="showMaintenanceModal()" class="btn btn-warning btn-block">
                                <i class="fas fa-tools"></i> –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ç–µ—Ö. —Ä–∞–±–æ—Ç–∞—Ö
                            </button>
                        </div>

                        <div class="form-group">
                            <label>–°–∏—Å—Ç–µ–º–∞</label>
                            <button onclick="clearLogs()" class="btn btn-danger btn-block">
                                <i class="fas fa-trash"></i> –û—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥–∏
                            </button>
                        </div>
                    </div>
                </div>

                <div class="discord-card">
                    <h2><i class="fas fa-th-list"></i> –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã <span class="badge badge-success" id="formsCount">0</span></h2>
                    <div id="formsList" class="forms-container">
                        <div class="form-card">
                            <p>–ó–∞–≥—Ä—É–∑–∫–∞...</p>
                        </div>
                    </div>
                </div>
            </div>

            <!-- –í–∫–ª–∞–¥–∫–∞ Webhook URL -->
            <div id="webhook" class="tab-content">
                <div class="discord-card">
                    <h2><i class="fas fa-link"></i> Webhook URL –¥–ª—è –Ø–Ω–¥–µ–∫—Å –§–æ—Ä–º</h2>
                    <p>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–æ—Ç URL –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –≤–µ–±—Ö—É–∫–∞ –≤—Å–µ—Ö –≤–∞—à–∏—Ö –Ø–Ω–¥–µ–∫—Å –§–æ—Ä–º:</p>
                    
                    <div class="webhook-url">
                        <span id="webhookUrlText">–ó–∞–≥—Ä—É–∑–∫–∞...</span>
                        <button class="copy-btn" onclick="copyWebhookUrl()">
                            <i class="fas fa-copy"></i> –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å
                        </button>
                    </div>

                    <div class="info-box">
                        <h4><i class="fas fa-info-circle"></i> –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –Ø–Ω–¥–µ–∫—Å –§–æ—Ä–º</h4>
                        <p><strong>URL:</strong> http://–≤–∞—à_—Å–µ—Ä–≤–µ—Ä:${PORT}/webhook/yandex-form</p>
                        <p><strong>–ú–µ—Ç–æ–¥:</strong> POST</p>
                        <p><strong>–¢–∏–ø —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ:</strong> application/json</p>
                        <p><strong>–¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞ (JSON-RPC):</strong></p>
                        <div class="mention-example">
{
  "jsonrpc": "2.0",
  "method": "submitForm",
  "params": {
    "formId": "{formId}",
    "formTitle": "{formTitle}",
    "answers": {answers | JSON}
  },
  "id": 1
}
                        </div>
                        <p><strong>–ò–ª–∏ —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞ (–æ–±—ã—á–Ω—ã–π JSON):</strong></p>
                        <div class="mention-example">
{
  "formId": "{formId}",
  "formTitle": "{formTitle}",
  "answers": {answers | JSON}
}
                        </div>
                        <p><strong>–í–∞–∂–Ω–æ:</strong> –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–∏–ª—å—Ç—Ä JSON –¥–ª—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π <code>answers</code></p>
                        <p><strong>–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ:</strong> –º–∞–∫—Å–∏–º—É–º ${MAX_QUESTIONS} –≤–æ–ø—Ä–æ—Å–æ–≤</p>
                    </div>
                </div>
            </div>

            <!-- –í–∫–ª–∞–¥–∫–∞ –ª–æ–≥–æ–≤ -->
            <div id="logs" class="tab-content">
                <div class="discord-card">
                    <h2><i class="fas fa-history"></i> –ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤</h2>
                    <div id="logsContent" style="max-height: 500px; overflow-y: auto; background: #2f3136; padding: 1rem; border-radius: 4px; font-family: monospace; font-size: 12px;">
                        –ó–∞–≥—Ä—É–∑–∫–∞ –ª–æ–≥–æ–≤...
                    </div>
                    <button onclick="loadLogs()" class="btn btn-secondary" style="margin-top: 15px;">
                        <i class="fas fa-sync"></i> –û–±–Ω–æ–≤–∏—Ç—å –ª–æ–≥–∏
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–æ—Ä–º—ã -->
    <div id="configModal" style="display: none; position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(0,0,0,0.8); z-index: 1000; justify-content: center; align-items: center;">
        <div class="discord-card" style="max-width: 900px; width: 95%; max-height: 90vh; overflow-y: auto;">
            <h2><i class="fas fa-sliders-h"></i> –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–æ—Ä–º—ã</h2>
            <p>–ù–∞—Å—Ç—Ä–æ–π—Ç–µ –∫–∞–∫ –±—É–¥—É—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —ç—Ç–æ–π —Ñ–æ—Ä–º—ã –≤ Discord</p>
            
            <div class="info-box">
                <h4><i class="fas fa-at"></i> –ù–æ–≤–∞—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞</h4>
                <p><strong>–ù–µ—Å–∫–æ–ª—å–∫–æ Discord ID:</strong> –º–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–ª–µ–π –¥–ª—è —É–ø–æ–º–∏–Ω–∞–Ω–∏—è</p>
                <p><strong>–£—Å–ª–æ–≤–Ω—ã–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è:</strong> —Ç–µ–≥–∏—Ç—å —Ä–æ–ª–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ—Ç–≤–µ—Ç–æ–≤</p>
                <p><strong>–ì–∏–±–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:</strong> –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –¥–ª—è –∫–∞–∂–¥–æ–π —Ñ–æ—Ä–º—ã</p>
            </div>
            
            <div class="config-section">
                <h3><i class="fas fa-palette"></i> –í–Ω–µ—à–Ω–∏–π –≤–∏–¥ —Å–æ–æ–±—â–µ–Ω–∏—è</h3>
                
                <div class="form-group">
                    <label for="configTitle">–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏—è</label>
                    <input type="text" id="configTitle" placeholder="–û—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –¥–ª—è –Ω–∞–∑–≤–∞–Ω–∏—è —Ñ–æ—Ä–º—ã">
                </div>

                <div class="form-group">
                    <label for="configDescription">–û–ø–∏—Å–∞–Ω–∏–µ</label>
                    <textarea id="configDescription" rows="2" placeholder="–¢–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –ø–æ–¥ –∑–∞–≥–æ–ª–æ–≤–∫–æ–º"></textarea>
                </div>

                <div class="form-group">
                    <label for="configColor">–¶–≤–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è</label>
                    <input type="color" id="configColor" value="#5865f2" style="width: 60px; height: 40px; margin-left: 10px;">
                    <span id="configColorText">#5865f2</span>
                </div>

                <div class="form-group">
                    <label for="configFooter">–¢–µ–∫—Å—Ç –≤ –ø–æ–¥–≤–∞–ª–µ</label>
                    <input type="text" id="configFooter" value="GTA5RP LAMESA" placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: GTA5RP LAMESA">
                </div>
            </div>

            <div class="config-section">
                <h3><i class="fas fa-at"></i> –£–ø–æ–º–∏–Ω–∞–Ω–∏—è</h3>
                
                <div class="form-group">
                    <label for="configMentions">–°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è —Ä–æ–ª–µ–π (ID —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)</label>
                    <input type="text" id="configMentions" placeholder="123456789012345678,987654321098765432">
                    <div class="mention-example">
                        –ü—Ä–∏–º–µ—Ä: 123456789012345678,987654321098765432<br>
                        –†–æ–ª–∏ –±—É–¥—É—Ç —É–ø–æ–º—è–Ω—É—Ç—ã: &lt;@&123456789012345678&gt; &lt;@&987654321098765432&gt;
                    </div>
                </div>
            </div>

            <div class="config-section">
                <h3><i class="fas fa-id-card"></i> –ü–æ–ª—è —Å Discord ID</h3>
                <p style="margin-bottom: 1rem; font-size: 0.9rem; color: #b9bbbe;">
                    –£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ (–Ω–∞—á–∏–Ω–∞—è —Å 0), –∫–æ—Ç–æ—Ä—ã–µ —Å–æ–¥–µ—Ä–∂–∞—Ç Discord ID –¥–ª—è —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                </p>
                
                <div id="discordIdFieldsContainer">
                    <!-- –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è–µ–º—ã–µ –ø–æ–ª—è –¥–ª—è Discord ID -->
                </div>
                
                <button type="button" onclick="addDiscordIdField()" class="btn btn-secondary">
                    <i class="fas fa-plus"></i> –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª–µ Discord ID
                </button>
            </div>

            <div class="config-section">
                <h3><i class="fas fa-random"></i> –£—Å–ª–æ–≤–Ω—ã–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è</h3>
                <p style="margin-bottom: 1rem; font-size: 0.9rem; color: #b9bbbe;">
                    –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è —Ä–æ–ª–µ–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ—Ç–≤–µ—Ç–æ–≤ –≤ —Ñ–æ—Ä–º–µ
                </p>
                
                <div id="conditionalMentionsContainer">
                    <!-- –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è–µ–º—ã–µ —É—Å–ª–æ–≤–Ω—ã–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è -->
                </div>
                
                <button type="button" onclick="addConditionalMention()" class="btn btn-secondary">
                    <i class="fas fa-plus"></i> –î–æ–±–∞–≤–∏—Ç—å —É—Å–ª–æ–≤–∏–µ
                </button>
            </div>

            <div class="config-section">
                <h3><i class="fas fa-question-circle"></i> –ù–∞–∑–≤–∞–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤</h3>
                <p style="margin-bottom: 1rem; font-size: 0.9rem; color: #b9bbbe;">
                    –ó–∞–¥–∞–π—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏—è –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤
                </p>
                
                <div id="questionTitlesContainer">
                    <!-- –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è–µ–º—ã–µ –ø–æ–ª—è –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤ -->
                </div>
                
                <button type="button" onclick="addQuestionTitleField()" class="btn btn-secondary">
                    <i class="fas fa-plus"></i> –î–æ–±–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å
                </button>
            </div>

            <div class="config-section">
                <h3><i class="fas fa-eye"></i> –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä</h3>
                <div class="embed-preview">
                    <div class="author">
                        <i class="fas fa-user"></i>
                        <span>–ò–º—è –≤–µ–±—Ö—É–∫–∞</span>
                    </div>
                    <div class="title" id="previewTitle">–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏—è</div>
                    <div class="field">
                        <div class="name" id="previewQuestion1">Discord ID 1</div>
                        <div>&lt;@123456789012345678&gt; üëÜ –£–ø–æ–º–∏–Ω–∞–Ω–∏–µ 1</div>
                    </div>
                    <div class="field">
                        <div class="name" id="previewQuestion2">Discord ID 2</div>
                        <div>&lt;@987654321098765432&gt; üëÜ –£–ø–æ–º–∏–Ω–∞–Ω–∏–µ 2</div>
                    </div>
                    <div class="field">
                        <div class="name" id="previewQuestion3">–í–æ–ø—Ä–æ—Å 3</div>
                        <div>–û—Ç–≤–µ—Ç 3</div>
                    </div>
                    <div class="footer" id="previewFooter">GTA5RP LAMESA</div>
                </div>
            </div>

            <div style="display: flex; gap: 10px; margin-top: 1.5rem;">
                <button onclick="saveFormConfig()" class="btn btn-success">
                    <i class="fas fa-check"></i> –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                </button>
                <button onclick="hideConfigModal()" class="btn btn-danger">
                    <i class="fas fa-times"></i> –û—Ç–º–µ–Ω–∞
                </button>
                <button onclick="resetFormConfig()" class="btn btn-secondary">
                    <i class="fas fa-undo"></i> –°–±—Ä–æ—Å–∏—Ç—å
                </button>
            </div>
        </div>
    </div>

    <!-- –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Ç–µ—Ö —Ä–∞–±–æ—Ç -->
    <div id="maintenanceModal" class="maintenance-modal">
        <div class="maintenance-content">
            <h2><i class="fas fa-tools"></i> –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ä–∞–±–æ—Ç–∞—Ö</h2>
            <p>–≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –í–°–ï –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤–µ–±—Ö—É–∫–∏ Discord.</p>
            
            <div class="form-group">
                <label for="maintenanceMessage">–°–æ–æ–±—â–µ–Ω–∏–µ</label>
                <textarea id="maintenanceMessage" rows="4" style="width: 100%; padding: 12px; background: #40444b; border: 1px solid #40444b; border-radius: 4px; color: #dcddde;">
‚ö° –ü—Ä–æ–≤–æ–¥—è—Ç—Å—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã
–í –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è –ø—Ä–æ–≤–æ–¥—è—Ç—Å—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ –∑–∞–ø–æ–ª–Ω—è–π—Ç–µ —Ñ–æ—Ä–º—ã –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ä–∞–±–æ—Ç.

–ü—Ä–∏–Ω–æ—Å–∏–º –∏–∑–≤–∏–Ω–µ–Ω–∏—è –∑–∞ –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞.
                </textarea>
            </div>

            <div style="display: flex; gap: 10px; margin-top: 1.5rem;">
                <button onclick="sendMaintenanceMessage()" class="btn btn-warning">
                    <i class="fas fa-paper-plane"></i> –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ–º
                </button>
                <button onclick="hideMaintenanceModal()" class="btn btn-secondary">
                    <i class="fas fa-times"></i> –û—Ç–º–µ–Ω–∞
                </button>
            </div>

            <div id="maintenanceResults" style="margin-top: 1rem; max-height: 200px; overflow-y: auto; display: none;">
                <h4>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤–∫–∏:</h4>
                <div id="maintenanceResultsContent" style="font-family: monospace; font-size: 12px;"></div>
            </div>
        </div>
    </div>

    <script>
        let currentEditingForm = null;

        async function loadForms() {
            try {
                const response = await fetch('/admin/forms', {
                    credentials: 'include'
                });
                
                if (response.status === 401) {
                    window.location.href = '/admin/login';
                    return;
                }
                
                const data = await response.json();
                
                document.getElementById('totalForms').textContent = data.total;
                document.getElementById('formsCount').textContent = data.total;
                
                const formsGrid = document.getElementById('formsList');
                const testSelect = document.getElementById('testFormId');
                
                if (data.forms.length === 0) {
                    formsGrid.innerHTML = '<div class="form-card"><p><i class="fas fa-inbox"></i> –ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ñ–æ—Ä–º</p></div>';
                    testSelect.innerHTML = '<option value="">-- –ù–µ—Ç —Ñ–æ—Ä–º --</option>';
                    return;
                }
                
                formsGrid.innerHTML = '';
                testSelect.innerHTML = '<option value="">-- –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º—É --</option>';
                
                data.forms.forEach(form => {
                    const formCard = document.createElement('div');
                    formCard.className = 'form-card';
                    formCard.innerHTML = \`
                        <h3><i class="fas fa-form"></i> \${form.formName}</h3>
                        <p><strong>ID:</strong> \${form.formId}</p>
                        <p><strong>Webhook:</strong> \${form.webhookPreview}</p>
                        <p><strong>–†–æ–ª–∏ –¥–ª—è —É–ø–æ–º–∏–Ω–∞–Ω–∏—è:</strong> \${form.mentions || '–ù–µ —É–∫–∞–∑–∞–Ω—ã'}</p>
                        <div class="form-actions">
                            <button onclick="configureForm('\${form.formId}')" class="btn btn-secondary">
                                <i class="fas fa-cog"></i> –ù–∞—Å—Ç—Ä–æ–∏—Ç—å
                            </button>
                            <button onclick="deleteForm('\${form.formId}')" class="btn btn-danger">
                                <i class="fas fa-trash"></i> –£–¥–∞–ª–∏—Ç—å
                            </button>
                            <button onclick="testSpecificForm('\${form.formId}')" class="btn">
                                <i class="fas fa-vial"></i> –¢–µ—Å—Ç
                            </button>
                        </div>
                    \`;
                    formsGrid.appendChild(formCard);
                    
                    const option = document.createElement('option');
                    option.value = form.formId;
                    option.textContent = \`\${form.formName} (\${form.formId})\`;
                    testSelect.appendChild(option);
                });
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ä–º:', error);
                showAlert('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ä–º', 'error');
            }
        }
        
        document.getElementById('registerForm').addEventListener('submit', async (e) => {
            e.preventDefault();
            
            const formData = new FormData(e.target);
            const data = Object.fromEntries(formData);
            
            try {
                const response = await fetch('/admin/register-form', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(data),
                    credentials: 'include'
                });
                
                if (response.status === 401) {
                    window.location.href = '/admin/login';
                    return;
                }
                
                const result = await response.json();
                
                if (result.status === 'success') {
                    showAlert(result.message, 'success');
                    e.target.reset();
                    loadForms();
                } else {
                    showAlert(result.message, 'error');
                }
            } catch (error) {
                showAlert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Ñ–æ—Ä–º—ã', 'error');
            }
        });
        
        async function deleteForm(formId) {
            if (!confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É —Å–≤—è–∑—å?')) return;
            
            try {
                const response = await fetch(\`/admin/forms/\${formId}\`, { 
                    method: 'DELETE',
                    credentials: 'include'
                });
                
                if (response.status === 401) {
                    window.location.href = '/admin/login';
                    return;
                }
                
                const result = await response.json();
                
                if (result.status === 'success') {
                    showAlert(result.message, 'success');
                    loadForms();
                } else {
                    showAlert(result.message, 'error');
                }
            } catch (error) {
                showAlert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–æ—Ä–º—ã', 'error');
            }
        }
        
        function addDiscordIdField(index = '') {
            const container = document.getElementById('discordIdFieldsContainer');
            const fieldHTML = \`
                <div class="discord-id-field-item">
                    <input type="number" 
                           class="discord-id-field-input" 
                           placeholder="–ù–æ–º–µ—Ä –≤–æ–ø—Ä–æ—Å–∞ (0, 1, 2...)" 
                           value="\${index}"
                           min="0"
                           max="${MAX_QUESTIONS - 1}">
                    <button type="button" class="btn btn-danger" onclick="this.parentElement.remove(); updatePreview()">
                        <i class="fas fa-times"></i>
                    </button>
                </div>
            \`;
            container.insertAdjacentHTML('beforeend', fieldHTML);
            updatePreview();
        }
        
        function addConditionalMention(condition = { question_index: '', answer_value: '', role_id: '' }) {
            const container = document.getElementById('conditionalMentionsContainer');
            const fieldHTML = \`
                <div class="conditional-mention-item">
                    <div class="conditional-mention-header">
                        <h4><i class="fas fa-random"></i> –£—Å–ª–æ–≤–Ω–æ–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ</h4>
                        <button type="button" class="btn btn-danger" onclick="this.parentElement.parentElement.remove(); updatePreview()">
                            <i class="fas fa-times"></i> –£–¥–∞–ª–∏—Ç—å
                        </button>
                    </div>
                    <div class="conditional-mention-content">
                        <div>
                            <label>–ù–æ–º–µ—Ä –≤–æ–ø—Ä–æ—Å–∞</label>
                            <input type="number" 
                                   class="conditional-question-index" 
                                   placeholder="0, 1, 2..." 
                                   value="\${condition.question_index || ''}"
                                   min="0"
                                   max="${MAX_QUESTIONS - 1}">
                        </div>
                        <div>
                            <label>–ó–Ω–∞—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞</label>
                            <input type="text" 
                                   class="conditional-answer-value" 
                                   placeholder="–¢–æ—á–Ω—ã–π —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞" 
                                   value="\${condition.answer_value || ''}">
                        </div>
                        <div>
                            <label>ID —Ä–æ–ª–∏ –¥–ª—è —É–ø–æ–º–∏–Ω–∞–Ω–∏—è</label>
                            <input type="text" 
                                   class="conditional-role-id" 
                                   placeholder="123456789012345678" 
                                   value="\${condition.role_id || ''}">
                        </div>
                    </div>
                </div>
            \`;
            container.insertAdjacentHTML('beforeend', fieldHTML);
            updatePreview();
        }
        
        function addQuestionTitleField(title = '') {
            const container = document.getElementById('questionTitlesContainer');
            const index = container.children.length + 1;
            const fieldHTML = \`
                <div class="question-title-item">
                    <input type="text" 
                           class="question-title-input" 
                           placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞ \${index}" 
                           value="\${title}"
                           oninput="updatePreview()">
                    <button type="button" class="btn btn-danger" onclick="this.parentElement.remove(); updatePreview()">
                        <i class="fas fa-times"></i>
                    </button>
                </div>
            \`;
            container.insertAdjacentHTML('beforeend', fieldHTML);
            updatePreview();
        }
        
        function loadDiscordIdFields(discordIdFields) {
            const container = document.getElementById('discordIdFieldsContainer');
            container.innerHTML = '';
            
            if (discordIdFields && discordIdFields.length > 0) {
                discordIdFields.forEach(index => {
                    addDiscordIdField(index);
                });
            } else {
                // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                addDiscordIdField('0');
            }
        }
        
        function loadConditionalMentions(conditionalMentions) {
            const container = document.getElementById('conditionalMentionsContainer');
            container.innerHTML = '';
            
            if (conditionalMentions && conditionalMentions.length > 0) {
                conditionalMentions.forEach(condition => {
                    addConditionalMention(condition);
                });
            }
        }
        
        function loadQuestionTitles(questionTitles) {
            const container = document.getElementById('questionTitlesContainer');
            container.innerHTML = '';
            
            if (questionTitles && questionTitles.length > 0) {
                questionTitles.forEach(title => {
                    addQuestionTitleField(title);
                });
            } else {
                // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                addQuestionTitleField('Discord ID 1');
                addQuestionTitleField('Discord ID 2');
                addQuestionTitleField('–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è');
            }
        }
        
        function getDiscordIdFields() {
            const inputs = document.querySelectorAll('.discord-id-field-input');
            const fields = [];
            inputs.forEach(input => {
                if (input.value.trim() && !isNaN(input.value)) {
                    fields.push(parseInt(input.value.trim()));
                }
            });
            return fields.length > 0 ? fields : [0];
        }
        
        function getConditionalMentions() {
            const items = document.querySelectorAll('.conditional-mention-item');
            const mentions = [];
            items.forEach(item => {
                const questionIndex = item.querySelector('.conditional-question-index').value;
                const answerValue = item.querySelector('.conditional-answer-value').value;
                const roleId = item.querySelector('.conditional-role-id').value;
                
                if (questionIndex && answerValue && roleId) {
                    mentions.push({
                        question_index: parseInt(questionIndex),
                        answer_value: answerValue.trim(),
                        role_id: roleId.trim()
                    });
                }
            });
            return mentions;
        }
        
        function getQuestionTitles() {
            const inputs = document.querySelectorAll('.question-title-input');
            const titles = [];
            inputs.forEach(input => {
                if (input.value.trim()) {
                    titles.push(input.value.trim());
                }
            });
            return titles;
        }
        
        async function configureForm(formId) {
            currentEditingForm = formId;
            
            try {
                const response = await fetch(\`/admin/forms/\${formId}/config\`, {
                    credentials: 'include'
                });
                
                if (response.status === 401) {
                    window.location.href = '/admin/login';
                    return;
                }
                
                const config = await response.json();
                
                document.getElementById('configTitle').value = config.title || '';
                document.getElementById('configDescription').value = config.description || '';
                document.getElementById('configColor').value = config.color || '#5865f2';
                document.getElementById('configColorText').textContent = config.color || '#5865f2';
                document.getElementById('configFooter').value = config.footer || 'GTA5RP LAMESA';
                document.getElementById('configMentions').value = config.mentions || '';
                
                // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                loadDiscordIdFields(config.discord_id_fields || [0]);
                loadConditionalMentions(config.conditional_mentions || []);
                loadQuestionTitles(config.question_titles || []);
                
                updatePreview();
                
                document.getElementById('configModal').style.display = 'flex';
                
            } catch (error) {
                showAlert('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ñ–æ—Ä–º—ã', 'error');
            }
        }
        
        async function saveFormConfig() {
            if (!currentEditingForm) return;
            
            const discordIdFields = getDiscordIdFields();
            const conditionalMentions = getConditionalMentions();
            const questionTitles = getQuestionTitles();
            
            const config = {
                title: document.getElementById('configTitle').value,
                description: document.getElementById('configDescription').value,
                color: document.getElementById('configColor').value,
                footer: document.getElementById('configFooter').value,
                mentions: document.getElementById('configMentions').value,
                discord_id_fields: discordIdFields,
                conditional_mentions: conditionalMentions,
                question_titles: questionTitles
            };
            
            try {
                const response = await fetch(\`/admin/forms/\${currentEditingForm}/config\`, {
                    method: 'PUT',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(config),
                    credentials: 'include'
                });
                
                if (response.status === 401) {
                    window.location.href = '/admin/login';
                    return;
                }
                
                const result = await response.json();
                
                if (result.status === 'success') {
                    showAlert('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!', 'success');
                    hideConfigModal();
                    loadForms();
                } else {
                    showAlert(result.message, 'error');
                }
            } catch (error) {
                showAlert('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫', 'error');
            }
        }
        
        function resetFormConfig() {
            if (!confirm('–°–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é?')) return;
            
            document.getElementById('configTitle').value = '';
            document.getElementById('configDescription').value = '';
            document.getElementById('configColor').value = '#5865f2';
            document.getElementById('configColorText').textContent = '#5865f2';
            document.getElementById('configFooter').value = 'GTA5RP LAMESA';
            document.getElementById('configMentions').value = '';
            
            loadDiscordIdFields([0]);
            loadConditionalMentions([]);
            loadQuestionTitles(['Discord ID 1', 'Discord ID 2', '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è']);
            
            updatePreview();
        }
        
        function hideConfigModal() {
            document.getElementById('configModal').style.display = 'none';
            currentEditingForm = null;
        }
        
        function updatePreview() {
            const title = document.getElementById('configTitle').value || '–ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–æ—Ä–º—ã';
            const footer = document.getElementById('configFooter').value || 'GTA5RP LAMESA';
            const color = document.getElementById('configColor').value;
            const questionTitles = getQuestionTitles();
            const discordIdFields = getDiscordIdFields();
            
            document.getElementById('previewTitle').textContent = title;
            document.getElementById('previewFooter').textContent = footer;
            document.getElementById('previewTitle').style.color = color;
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ –ø—Ä–µ–≤—å—é
            const previewQuestions = document.querySelectorAll('.embed-preview .field');
            previewQuestions.forEach((preview, index) => {
                const nameElement = preview.querySelector('.name');
                const valueElement = preview.querySelector('div:last-child');
                
                if (questionTitles[index]) {
                    nameElement.textContent = questionTitles[index];
                } else if (index === 0) {
                    nameElement.textContent = 'Discord ID 1';
                } else if (index === 1) {
                    nameElement.textContent = 'Discord ID 2';
                } else {
                    nameElement.textContent = \`–í–æ–ø—Ä–æ—Å \${index + 1}\`;
                }
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –ø–æ–ª–µ–π Discord ID
                if (discordIdFields.includes(index)) {
                    const mentionNumber = discordIdFields.indexOf(index) + 1;
                    valueElement.innerHTML = \`&lt;@\${123456789012345678 + index}&gt; üëÜ –£–ø–æ–º–∏–Ω–∞–Ω–∏–µ \${mentionNumber}\`;
                } else {
                    valueElement.textContent = \`–û—Ç–≤–µ—Ç \${index + 1}\`;
                }
            });
        }
        
        document.getElementById('configTitle').addEventListener('input', updatePreview);
        document.getElementById('configFooter').addEventListener('input', updatePreview);
        document.getElementById('configColor').addEventListener('input', function() {
            document.getElementById('configColorText').textContent = this.value;
            updatePreview();
        });
        
        async function testWebhook() {
            const formId = document.getElementById('testFormId').value;
            if (!formId) {
                showAlert('–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º—É –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è', 'error');
                return;
            }
            
            await testSpecificForm(formId);
        }
        
        async function testSpecificForm(formId) {
            try {
                const response = await fetch(\`/admin/test-webhook/\${formId}\`, { 
                    method: 'POST',
                    credentials: 'include'
                });
                
                if (response.status === 401) {
                    window.location.href = '/admin/login';
                    return;
                }
                
                const result = await response.json();
                
                if (result.status === 'success') {
                    showAlert('‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Discord!', 'success');
                } else {
                    showAlert(result.message, 'error');
                }
            } catch (error) {
                showAlert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –≤–µ–±—Ö—É–∫–∞', 'error');
            }
        }
        
        function showTab(tabName) {
            document.querySelectorAll('.tab-content').forEach(tab => {
                tab.classList.remove('active');
            });
            document.getElementById(tabName).classList.add('active');
            
            document.querySelectorAll('.tab').forEach(tab => {
                tab.classList.remove('active');
            });
            event.target.classList.add('active');
            
            if (tabName === 'logs') {
                loadLogs();
            }
        }
        
        function copyWebhookUrl() {
            const urlElement = document.getElementById('webhookUrlText');
            navigator.clipboard.writeText(urlElement.textContent);
            showAlert('URL —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!', 'success');
        }
        
        async function loadLogs() {
            try {
                const response = await fetch('/admin/logs', {
                    credentials: 'include'
                });
                
                if (response.status === 401) {
                    window.location.href = '/admin/login';
                    return;
                }
                
                const logs = await response.text();
                document.getElementById('logsContent').textContent = logs || '–õ–æ–≥–∏ –ø—É—Å—Ç—ã';
            } catch (error) {
                document.getElementById('logsContent').textContent = '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–æ–≥–æ–≤';
            }
        }
        
        async function clearLogs() {
            if (!confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –ª–æ–≥–∏?')) return;
            
            try {
                const response = await fetch('/admin/logs', { 
                    method: 'DELETE',
                    credentials: 'include'
                });
                
                if (response.status === 401) {
                    window.location.href = '/admin/login';
                    return;
                }
                
                const result = await response.json();
                
                if (result.status === 'success') {
                    showAlert(result.message, 'success');
                    loadLogs();
                } else {
                    showAlert(result.message, 'error');
                }
            } catch (error) {
                showAlert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –ª–æ–≥–æ–≤', 'error');
            }
        }
        
        function showMaintenanceModal() {
            document.getElementById('maintenanceModal').style.display = 'flex';
            document.getElementById('maintenanceResults').style.display = 'none';
        }

        function hideMaintenanceModal() {
            document.getElementById('maintenanceModal').style.display = 'none';
        }

        async function sendMaintenanceMessage() {
            const message = document.getElementById('maintenanceMessage').value;
            const resultsDiv = document.getElementById('maintenanceResultsContent');
            const resultsContainer = document.getElementById('maintenanceResults');
            
            resultsDiv.innerHTML = 'üîÑ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π...';
            resultsContainer.style.display = 'block';

            try {
                const response = await fetch('/admin/broadcast-maintenance', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ message }),
                    credentials: 'include'
                });

                if (response.status === 401) {
                    window.location.href = '/admin/login';
                    return;
                }

                const result = await response.json();
                
                if (result.status === 'success') {
                    let resultsHTML = '';
                    result.results.forEach((formResult, index) => {
                        const statusIcon = formResult.success ? '‚úÖ' : '‚ùå';
                        resultsHTML += \`\${statusIcon} \${formResult.formName}: \${formResult.message}<br>\`;
                    });
                    
                    resultsDiv.innerHTML = resultsHTML;
                    showAlert(\`–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ \${result.successCount} –∏–∑ \${result.totalCount} –≤–µ–±—Ö—É–∫–æ–≤\`, 'success');
                } else {
                    resultsDiv.innerHTML = \`‚ùå –û—à–∏–±–∫–∞: \${result.message}\`;
                    showAlert(result.message, 'error');
                }
            } catch (error) {
                resultsDiv.innerHTML = '‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è';
                showAlert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π', 'error');
            }
        }
        
        async function logout() {
            try {
                const response = await fetch('/admin/logout', { 
                    method: 'POST',
                    credentials: 'include'
                });
                window.location.href = '/admin/login';
            } catch (error) {
                window.location.href = '/admin/login';
            }
        }
        
        function showAlert(message, type) {
            const alert = document.getElementById('alert');
            alert.textContent = message;
            alert.className = \`alert alert-\${type}\`;
            alert.classList.remove('hidden');
            
            const icon = type === 'success' ? 'fa-check-circle' : 
                        type === 'warning' ? 'fa-exclamation-triangle' : 'fa-exclamation-circle';
            alert.innerHTML = \`<i class="fas \${icon}"></i> \${message}\`;
            
            setTimeout(() => {
                alert.classList.add('hidden');
            }, 5000);
        }
        
        document.addEventListener('DOMContentLoaded', function() {
            document.getElementById('webhookUrlText').textContent = window.location.origin + '/webhook/yandex-form';
            loadForms();
        });
    </script>
</body>
</html>
`;

// –ú–∞—Ä—à—Ä—É—Ç—ã –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
app.get('/admin/login', (req, res) => {
    if (req.session.authenticated) {
        res.redirect('/admin');
    } else {
        res.send(LOGIN_HTML);
    }
});

app.post('/admin/login', (req, res) => {
    const { username, password } = req.body;
    
    db.get('SELECT * FROM users WHERE username = ?', [username], (err, user) => {
        if (err) {
            return res.status(500).json({ status: 'error', message: '–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö' });
        }
        
        if (!user) {
            return res.status(401).json({ status: 'error', message: '–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å' });
        }
        
        bcrypt.compare(password, user.password_hash, (err, result) => {
            if (err) {
                return res.status(500).json({ status: 'error', message: '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞—Ä–æ–ª—è' });
            }
            
            if (result) {
                req.session.authenticated = true;
                req.session.username = username;
                res.json({ status: 'success', message: '–í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω' });
            } else {
                res.status(401).json({ status: 'error', message: '–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å' });
            }
        });
    });
});

app.post('/admin/logout', (req, res) => {
    req.session.destroy((err) => {
        if (err) {
            console.error('–û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞:', err);
        }
        res.json({ status: 'success', message: '–í—ã—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω' });
    });
});

// –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∞–¥–º–∏–Ω–∫–∏
app.get('/admin', requireAuth, (req, res) => {
    res.send(ADMIN_HTML);
});

// API –º–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è –∞–¥–º–∏–Ω–∫–∏
app.get('/admin/forms', requireAuth, (req, res) => {
    db.all(
        `SELECT form_id as formId, form_name as formName, webhook_url as webhookUrl, 
                mentions, created_at as createdAt 
         FROM forms ORDER BY created_at DESC`,
        (err, rows) => {
            if (err) {
                console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–æ—Ä–º:', err);
                return res.status(500).json({ status: 'error', message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
            }
            
            const forms = rows.map(form => ({
                ...form,
                webhookPreview: form.webhookUrl ? form.webhookUrl.substring(0, 50) + '...' : '–ù–µ —É–∫–∞–∑–∞–Ω'
            }));

            res.json({
                status: 'success',
                total: forms.length,
                forms
            });
        }
    );
});

app.get('/admin/forms/:formId/config', requireAuth, (req, res) => {
    const { formId } = req.params;
    
    db.get(
        `SELECT title, description, color, footer, mentions, question_titles, discord_id_fields, conditional_mentions
         FROM forms WHERE form_id = ?`,
        [formId],
        (err, row) => {
            if (err) {
                console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:', err);
                return res.status(500).json({ status: 'error', message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
            }
            
            if (!row) {
                return res.status(404).json({ status: 'error', message: '–§–æ—Ä–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
            }

            let question_titles = [];
            let discord_id_fields = [0];
            let conditional_mentions = [];

            try {
                question_titles = JSON.parse(row.question_titles || '[]');
                discord_id_fields = JSON.parse(row.discord_id_fields || '[0]');
                conditional_mentions = JSON.parse(row.conditional_mentions || '[]');
            } catch (e) {
                console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –ø–æ–ª–µ–π:', e);
            }

            res.json({
                status: 'success',
                config: {
                    title: row.title || '',
                    description: row.description || '',
                    color: row.color || '#5865f2',
                    footer: row.footer || 'GTA5RP LAMESA',
                    mentions: row.mentions || '',
                    question_titles: question_titles,
                    discord_id_fields: discord_id_fields,
                    conditional_mentions: conditional_mentions
                }
            });
        }
    );
});

app.put('/admin/forms/:formId/config', requireAuth, (req, res) => {
    const { formId } = req.params;
    const config = req.body;
    
    db.run(
        `UPDATE forms SET 
            title = ?, description = ?, color = ?, footer = ?, mentions = ?, 
            question_titles = ?, discord_id_fields = ?, conditional_mentions = ?, updated_at = CURRENT_TIMESTAMP 
         WHERE form_id = ?`,
        [
            config.title, 
            config.description, 
            config.color, 
            config.footer, 
            config.mentions, 
            JSON.stringify(config.question_titles || []), 
            JSON.stringify(config.discord_id_fields || [0]),
            JSON.stringify(config.conditional_mentions || []),
            formId
        ],
        function(err) {
            if (err) {
                console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:', err);
                return res.status(500).json({ status: 'error', message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
            }
            
            if (this.changes === 0) {
                return res.status(404).json({ status: 'error', message: '–§–æ—Ä–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
            }

            logRequest(formId, 'CONFIG_UPDATED', '–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞');
            
            res.json({
                status: 'success',
                message: '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã'
            });
        }
    );
});

app.post('/admin/register-form', requireAuth, (req, res) => {
    const { formId, formName, discordWebhookUrl } = req.body;

    if (!formId || !formName || !discordWebhookUrl) {
        return res.status(400).json({
            status: 'error',
            message: 'formId, formName –∏ discordWebhookUrl –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã'
        });
    }

    if (!isValidWebhookUrl(discordWebhookUrl)) {
        return res.status(400).json({
            status: 'error',
            message: '–ù–µ–≤–µ—Ä–Ω—ã–π Discord Webhook URL. –î–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å https://discord.com/api/webhooks/'
        });
    }

    db.run(
        `INSERT INTO forms (form_id, form_name, webhook_url) 
         VALUES (?, ?, ?)`,
        [formId, formName, discordWebhookUrl],
        function(err) {
            if (err) {
                if (err.message.includes('UNIQUE constraint failed')) {
                    return res.status(400).json({
                        status: 'error',
                        message: `–§–æ—Ä–º–∞ —Å ID ${formId} —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞`
                    });
                }
                console.error('–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Ñ–æ—Ä–º—ã:', err);
                return res.status(500).json({
                    status: 'error',
                    message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
                });
            }

            console.log(`‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ —Ñ–æ—Ä–º–∞: ${formId} - ${formName}`);
            logRequest(formId, 'REGISTERED', `–§–æ—Ä–º–∞ "${formName}" –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞`);

            res.json({
                status: 'success',
                message: `–§–æ—Ä–º–∞ "${formName}" —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞`,
                formId: formId
            });
        }
    );
});

app.delete('/admin/forms/:formId', requireAuth, (req, res) => {
    const { formId } = req.params;
    
    db.get('SELECT form_name FROM forms WHERE form_id = ?', [formId], (err, row) => {
        if (err) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Ñ–æ—Ä–º—ã:', err);
            return res.status(500).json({ status: 'error', message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
        }
        
        if (!row) {
            return res.status(404).json({ status: 'error', message: `–§–æ—Ä–º–∞ ${formId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞` });
        }

        const formName = row.form_name;
        
        db.run('DELETE FROM forms WHERE form_id = ?', [formId], function(err) {
            if (err) {
                console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–æ—Ä–º—ã:', err);
                return res.status(500).json({ status: 'error', message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
            }
            
            console.log(`üóëÔ∏è –£–¥–∞–ª–µ–Ω–∞ —Ñ–æ—Ä–º–∞: ${formId} - ${formName}`);
            logRequest(formId, 'DELETED', `–§–æ—Ä–º–∞ "${formName}" —É–¥–∞–ª–µ–Ω–∞`);
            
            res.json({ status: 'success', message: `–§–æ—Ä–º–∞ "${formName}" —É–¥–∞–ª–µ–Ω–∞` });
        });
    });
});

app.post('/admin/test-webhook/:formId', requireAuth, (req, res) => {
    const { formId } = req.params;
    
    db.get(
        `SELECT form_name, webhook_url, title, description, color, footer, mentions, question_titles, discord_id_fields, conditional_mentions
         FROM forms WHERE form_id = ?`,
        [formId],
        (err, formConfig) => {
            if (err) {
                console.error('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Ñ–æ—Ä–º—ã:', err);
                return res.status(500).json({ status: 'error', message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
            }
            
            if (!formConfig) {
                return res.status(404).json({ status: 'error', message: `–§–æ—Ä–º–∞ ${formId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞` });
            }

            const testData = {
                form: { id: formId, title: formConfig.form_name },
                answers: [
                    { question_id: 'q1', text: '123456789012345678' },
                    { question_id: 'q2', text: '987654321098765432' },
                    { question_id: 'q3', text: '–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å' },
                    { question_id: 'q4', text: '25 –ª–µ—Ç' },
                    { question_id: 'q5', text: '–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã' }
                ]
            };

            sendDiscordMessage(formConfig, testData.form, testData.answers)
                .then(() => {
                    logRequest(formId, 'TEST', '–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
                    res.json({ status: 'success', message: '–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Discord' });
                })
                .catch(error => {
                    console.error('–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–µ–±—Ö—É–∫–∞:', error);
                    logRequest(formId, 'TEST_ERROR', error.message);
                    res.status(500).json({ status: 'error', message: '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è' });
                });
        }
    );
});

app.get('/admin/logs', requireAuth, (req, res) => {
    db.all(
        `SELECT form_id, status, message, timestamp 
         FROM logs ORDER BY timestamp DESC LIMIT 100`,
        (err, rows) => {
            if (err) {
                console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤:', err);
                return res.status(500).send('–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ª–æ–≥–æ–≤');
            }
            
            const logs = rows.map(log => 
                `[${log.timestamp}] FORM:${log.form_id || 'SYSTEM'} STATUS:${log.status} ${log.message || ''}`
            ).join('\n');
            
            res.set('Content-Type', 'text/plain');
            res.send(logs);
        }
    );
});

app.delete('/admin/logs', requireAuth, (req, res) => {
    db.run('DELETE FROM logs', function(err) {
        if (err) {
            console.error('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ª–æ–≥–æ–≤:', err);
            return res.status(500).json({ status: 'error', message: '–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ª–æ–≥–æ–≤' });
        }
        
        logRequest('SYSTEM', 'LOGS_CLEARED', '–õ–æ–≥–∏ –æ—á–∏—â–µ–Ω—ã —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω–∫—É');
        res.json({ status: 'success', message: '–õ–æ–≥–∏ –æ—á–∏—â–µ–Ω—ã' });
    });
});

// –ù–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –æ —Ç–µ—Ö—Ä–∞–±–æ—Ç–∞—Ö
app.post('/admin/broadcast-maintenance', requireAuth, async (req, res) => {
    try {
        const { message } = req.body;
        
        if (!message || message.trim().length === 0) {
            return res.status(400).json({ 
                status: 'error', 
                message: '–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º' 
            });
        }

        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã
        const forms = await new Promise((resolve, reject) => {
            db.all('SELECT form_id, form_name, webhook_url FROM forms', (err, rows) => {
                if (err) {
                    reject(err);
                } else {
                    resolve(rows);
                }
            });
        });

        if (forms.length === 0) {
            return res.json({
                status: 'success',
                message: '–ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ñ–æ—Ä–º –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏',
                results: [],
                successCount: 0,
                totalCount: 0
            });
        }

        const results = [];
        let successCount = 0;

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –∫–∞–∂–¥—ã–π –≤–µ–±—Ö—É–∫
        for (const form of forms) {
            try {
                const embed = {
                    title: "‚ö†Ô∏è –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã",
                    description: message,
                    color: 16776960, // –∂–µ–ª—Ç—ã–π —Ü–≤–µ—Ç
                    timestamp: new Date().toISOString(),
                    footer: { text: "GTA5RP LAMESA - –°–∏—Å—Ç–µ–º–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ" }
                };

                const payload = {
                    embeds: [embed]
                };

                await axios.post(form.webhook_url, payload);
                
                results.push({
                    formId: form.form_id,
                    formName: form.form_name,
                    success: true,
                    message: '–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ'
                });
                successCount++;

                // –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É
                await logRequest(form.form_id, 'MAINTENANCE_SENT', '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ç–µ—Ö—Ä–∞–±–æ—Ç–∞—Ö –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');

                // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ —á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å Discord
                await new Promise(resolve => setTimeout(resolve, 100));

            } catch (error) {
                console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–ª—è —Ñ–æ—Ä–º—ã ${form.form_name}:`, error.message);
                
                results.push({
                    formId: form.form_id,
                    formName: form.form_name,
                    success: false,
                    message: `–û—à–∏–±–∫–∞: ${error.response?.data?.message || error.message}`
                });

                // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
                await logRequest(form.form_id, 'MAINTENANCE_ERROR', error.message);
            }
        }

        // –õ–æ–≥–∏—Ä—É–µ–º –æ–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        await logRequest('SYSTEM', 'MAINTENANCE_BROADCAST', 
            `–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ${successCount}/${forms.length} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Ç–µ—Ö—Ä–∞–±–æ—Ç–∞—Ö`);

        res.json({
            status: 'success',
            message: `–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –£—Å–ø–µ—à–Ω–æ: ${successCount}/${forms.length}`,
            results: results,
            successCount: successCount,
            totalCount: forms.length
        });

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏:', error);
        await logRequest('SYSTEM', 'MAINTENANCE_ERROR', error.message);
        res.status(500).json({ 
            status: 'error', 
            message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫–µ' 
        });
    }
});

// Health check
app.get('/health', (req, res) => {
    res.json({ 
        status: 'healthy', 
        timestamp: new Date().toISOString(),
        version: '5.0-ADVANCED',
        note: '–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: –Ω–µ—Å–∫–æ–ª—å–∫–æ Discord ID + —É—Å–ª–æ–≤–Ω—ã–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è',
        max_questions: MAX_QUESTIONS
    });
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
initializeDatabase().then(database => {
    db = database;
    
    app.listen(PORT, '0.0.0.0', () => {
        console.log(`
‚ú® üöÄ –°–ï–†–í–ï–† –Ø–ù–î–ï–ö–° –§–û–†–ú–´ ‚Üí DISCORD –ó–ê–ü–£–©–ï–ù! ‚ú®

üìç –ü–æ—Ä—Ç: ${PORT}
üìä –ê–¥–º–∏–Ω–∫–∞: http://localhost:${PORT}/admin
üåê –î–æ—Å—Ç—É–ø –∏–∑–≤–Ω–µ: http://–≤–∞—à_—Å–µ—Ä–≤–µ—Ä:${PORT}/admin
üîê –õ–æ–≥–∏–Ω: admin / admin123

üéâ –†–ê–°–®–ò–†–ï–ù–ù–´–ï –í–û–ó–ú–û–ñ–ù–û–°–¢–ò –í–ï–†–°–ò–ò 5.0-ADVANCED:
‚úÖ –ù–ï–°–ö–û–õ–¨–ö–û DISCORD ID - –º–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–ª–µ–π –¥–ª—è —É–ø–æ–º–∏–Ω–∞–Ω–∏—è
‚úÖ –£–°–õ–û–í–ù–´–ï –£–ü–û–ú–ò–ù–ê–ù–ò–Ø - —Ç–µ–≥–∏—Ç—å —Ä–∞–∑–Ω—ã–µ —Ä–æ–ª–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ—Ç–≤–µ—Ç–æ–≤
‚úÖ –ì–ò–ë–ö–ò–ï –ù–ê–°–¢–†–û–ô–ö–ò - –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –¥–ª—è –∫–∞–∂–¥–æ–π —Ñ–æ—Ä–º—ã
‚úÖ –ö–ê–°–¢–û–ú–ù–´–ï –ù–ê–ó–í–ê–ù–ò–Ø –í–û–ü–†–û–°–û–í
‚úÖ –ù–ï –¢–†–ï–ë–£–ï–¢–°–Ø –ü–ï–†–ï–î–ê–ß–ê –í–û–ü–†–û–°–û–í –ò–ó –§–û–†–ú–´
‚úÖ –û–ì–†–ê–ù–ò–ß–ï–ù–ò–ï: ${MAX_QUESTIONS} –í–û–ü–†–û–°–û–í
‚úÖ –§–£–¢–ï–† "GTA5RP LAMESA"
‚úÖ –ü–û–î–î–ï–†–ñ–ö–ê JSON-RPC POST
‚úÖ –£–ú–ù–´–ï –£–ü–û–ú–ò–ù–ê–ù–ò–Ø
‚úÖ –°–û–•–†–ê–ù–ï–ù–ò–ï –ù–ê–°–¢–†–û–ï–ö –§–û–†–ú
‚úÖ –†–ê–°–°–´–õ–ö–ê –¢–ï–•–ù–ò–ß–ï–°–ö–ò–• –£–í–ï–î–û–ú–õ–ï–ù–ò–ô
üîê –ë–ï–ó–û–ü–ê–°–ù–ê–Ø –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–Ø

‚ö° –°–ï–†–í–ï–† –ì–û–¢–û–í –ö –†–ê–ë–û–¢–ï!

üí° –í–ê–ñ–ù–û: –°–º–µ–Ω–∏—Ç–µ –ø–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ –∫–æ–¥–µ!
        `);
    });
}).catch(err => {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', err);
    process.exit(1);
});

process.on('SIGINT', async () => {
    console.log('\nüì¥ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–µ—Ä–∞...');
    await logRequest('SYSTEM', 'SHUTDOWN', '–°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    if (db) {
        db.close();
    }
    process.exit(0);
});